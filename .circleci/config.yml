version: 2.1

orbs:
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0
  snyk: snyk/snyk@1.5.0
  maven: circleci/maven@1.3

executors:
  openjdk11:
    docker:
      - image: cimg/openjdk:17.0
      - image: cimg/postgres:14.11
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 2024
          POSTGRES_DB: cfd

jobs:
  my_job:
    docker:
      - image: cimg/openjdk:17.0 # Use any image that includes Java
    steps:
      - checkout

  build:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Set up JDK 17
          command: |
            export ADOPTIUM_JDK_HOME="/C/Users/daksh/AppData/Local/Programs/Eclipse Adoptium/jdk-17.0.10.7-hotspot"
            export JAVA_HOME="$ADOPTIUM_JDK_HOME"
            export PATH="$ADOPTIUM_JDK_HOME/bin:$PATH"
      - run:
          name: Build project
          command: mvn clean install -Dmaven.test.failure.ignore=true

  test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Set up JDK 17
          command: |
            export ADOPTIUM_JDK_HOME="/C/Users/daksh/AppData/Local/Programs/Eclipse Adoptium/jdk-17.0.10.7-hotspot"
            export JAVA_HOME="$ADOPTIUM_JDK_HOME"
            export PATH="$ADOPTIUM_JDK_HOME/bin:$PATH"
      - run:
          name: Run tests
          command: mvn test

  #security_scan:
  security_scan:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Run OWASP Dependency-Check
          command: |
            # Make the script executable
            chmod +x run.bat

            # Invoke the script with appropriate parameters
            #./dependency-check.sh --project "C:\Users\daksh\SCTP\Spring-boot-parking-app\sctp-cohort5-m3-grp3" --format HTML --out "C:\dependency-check-9.1.0-release"

  deploy_heroku:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - setup_remote_docker # Set up Docker environment
      - heroku/install # Install Heroku CLI
      - checkout # Check out your code repository
      - run:
          name: Heroku Container Push
          command: |
            heroku container:login                    # Log in to Heroku container registry
            heroku container:push web -a project-g3-m4  # Push Docker container to Heroku
            heroku container:release web -a project-g3-m4  # Release the container on Heroku

  ci_flow:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      # Add CI steps for develop branch
      - run:
          name: CI steps for develop branch
          command: |
            # Add your CI steps here for the develop branch
            # Assuming your unit tests are Maven-based
            #mvn clean test

      - run:
          name: Deploy to Production
          command: |
            # Add deployment steps here
            # This will only execute if all unit tests pass
            heroku container:login
            heroku container:push web -a project-g3-m4
            heroku container:release web -project-g3-m4

  cicd_flow:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      # Add CI/CD steps for release branch
      - run:
          name: CI/CD steps for release branch
          command: |
            # Add your CI/CD steps here for the release branch
            #mvn clean test

workflows:
  my_cicd_flow:
    jobs:
      - build
      #- test:
      #requires:
      #- build
      - security_scan:
          requires:
            - build
      - deploy_heroku:
          requires:
            #- test
          filters:
            branches:
              only: main
      - ci_flow: # Add CI steps for develop branch
          filters:
            branches:
              only: develop
      - cicd_flow: # Add CI/CD steps for release branch
          filters:
            branches:
              only: release
